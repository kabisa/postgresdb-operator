---
- name: read grants {{ meta.namespace }}
  k8s_info:
    api_version: postgres.kabisa.nl/v1alpha1
    kind: PostgresUserGrant
    namespace: "{{ meta.namespace }}"
  register: grants_result
- name: instantiate variable
  set_fact:
    databases: {}
- name: get database_privs
  set_fact:
    databases: "{{ databases | combine( {item.spec.database_name: {'priv': item.spec.priv} } ) }}"
  loop: "{{ grants_result.resources | list }}"
  when: item.spec.user_name == user_name
- name: read databases in ns {{ meta.namespace }}
  k8s_info:
    api_version: postgres.kabisa.nl/v1alpha1
    kind: Database
    namespace: "{{ meta.namespace }}"
  register: databases_result
- name: get database_hosts
  set_fact:
    databases: "{{ databases | combine( { item.metadata.name: {'host': item.spec.host, 'database_name': item.spec.database_name }}, recursive=True ) }}"
  loop: "{{ databases_result.resources | list }}"
  when: item.spec.database_name in databases
- name: get host info for databases
  include_role:
    name: postgresuser
    tasks_from: get_host_info_for_databases
  vars:
    item: item
  loop: "{{ databases | dict2items }}"
- name: store database_hosts results
  set_fact:
    databases: "{{ databases | combine( { item.key: item.value}, recursive=True ) }}"
  loop: "{{ res_dict | dict2items }}"
- name: debug
  debug:
    var: databases
- name: create user/grant
  include_role:
    name: postgreshost
    tasks_from: create
  when:
    - desired_state == "present"
    - databases | lenght > 0
- name: drop user/grant
  include_role:
    name: postgreshost
    tasks_from: drop
  when: desired_state != "present" or databases | lenght == 0
